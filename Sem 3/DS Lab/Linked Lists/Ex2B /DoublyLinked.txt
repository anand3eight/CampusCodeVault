Ex : 2B

Q1//Single Linked List - Palindrome Check

#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>

struct Node
{
	int num;
	struct Node *next;
}*left;

typedef struct Node Node;

Node *push(Node *ptr)
{
    struct Node *new = (struct Node*)malloc(sizeof(struct Node));
    printf("Enter Value : ");
    scanf("%d", &new->num);
    new->next = ptr->next;
    ptr->next = new;
    return new;
}

bool isPalindrome(Node *right)
{
		int isp;
		if(right == NULL)
				return 1;
		isp = isPalindrome(right->next);
		if(isp == 0)
				return 0;
		int isp2 = (left->num == right->num);
		left = left->next;
		return isp2;
}

void display(Node *ptr)
{
      printf("\nList : ");
      while(ptr != NULL)
      {
            printf("%d ", ptr->num);
            ptr = ptr->next;
      }
}

void main()
{
		int i, n;
	  Node *current, *head = (struct Node*)malloc(sizeof(struct Node));
    current = head;
    printf("Enter Number of Elements : ");
    scanf("%d", &n);
    for(i = 0; i < n; i++)
    {
        current = push(current);
    }
		current->next = NULL;
    display(head->next);
		left = head->next;
		int op = isPalindrome(head->next);
		if(op == 1)
				printf("\nPalindrome");
		else
				printf("\nNot a Palindrome");
}
OUTPUT 1:
Enter Number of Elements : 5
Enter Value : 1
Enter Value : 2
Enter Value : 3
Enter Value : 2
Enter Value : 1

List : 1 2 3 2 1
Palindrome

OUTPUT 2:
Enter Number of Elements : 5
Enter Value : 1
Enter Value : 2
Enter Value : 3
Enter Value : 4
Enter Value : 5

List : 1 2 3 4 5
Not a Palindrome

Q2//Split - Circular Linked List

#include<stdio.h>
#include<stdlib.h>

struct Node
{
    int num, flag;
    struct Node *next;
};

struct Node *push(struct Node *ptr)
{
    struct Node *new = malloc(sizeof(struct Node));
    printf("Enter Value : ");
    scanf("%d", &new->num);
    new->flag = 0;
    new->next = ptr->next;
    ptr->next = new;
    return new;
}

void display(struct Node *ptr)
{
      struct Node *temp = ptr;
      printf("\nList : ");
      do
      {
            printf("%d ", ptr->num);
            ptr = ptr->next;
      }while(ptr != temp);
}

struct Node* split(struct Node *ptr, int val)
{
	int k = 0;
	struct Node *ptr2, *head = ptr;
	while(ptr!= NULL && k < val-1)
	{
		ptr = ptr->next;
		k++;
	}
	struct Node* temp = ptr->next;
	ptr->next = head;
	ptr2 = temp;
  while(ptr2->next->next != head)
  {
      ptr2 = ptr2->next;
  }
  ptr2->next = temp;
  return temp;
}

int len(struct Node *ptr, struct Node *head)
{
	int length = 0;
    while(ptr->next != NULL)
    {
    	if(ptr == head)
    	{
    		ptr = ptr->next;
    		continue;
    	}
    	ptr->flag += 1;
    	if(ptr->flag > 1)
    		return length;
        ptr = ptr->next;
        length++;
	}
}

void main()
{
    struct Node *current, *newhead, *head = malloc(sizeof(struct Node));
    int i, n;
    printf("Enter Number of Elements : ");
    scanf("%d", &n);
    current = head;
    for(i = 0; i < n; i++)
    {
       current = push(current);
    }
    current->next = head;
	  int l = len(head->next, head);
	  if(l%2)
	  {
		    newhead = split(head->next, l/2 + 1);
	  }
	  else
	  {
		    newhead = split(head->next, l/2);
	  }
	  printf("\nPart 1 : ");
	  display(head->next);
	  printf("\nPart 2 : ");
	  display(newhead);
}

OUTPUT 1:
Enter Number of Elements : 7
Enter Value : 1
Enter Value : 2
Enter Value : 3
Enter Value : 4
Enter Value : 5
Enter Value : 6
Enter Value : 7

Part 1 :
List : 1 2 3 4
Part 2 :
List : 5 6 7

OUTPUT 2 :
Enter Number of Elements : 6
Enter Value : 1
Enter Value : 2
Enter Value : 3
Enter Value : 4
Enter Value : 5
Enter Value : 6

Part 1 :
List : 1 2 3
Part 2 :
List : 4 5 6

Q3//Single Linked List - Distinct Sorted Array

#include<stdio.h>
#include<stdlib.h>

struct Node
{
	int num;
	struct Node *next;
};

typedef struct Node Node;

Node *push(struct Node *ptr)
{
    struct Node *new = (struct Node*)malloc(sizeof(struct Node));
    printf("Enter Value : ");
    scanf("%d", &new->num);
    new->next = ptr->next;
    ptr->next = new;
    return new;
}

void display(Node *ptr)
{
      printf("\nList : ");
      while(ptr != NULL)
      {
            printf("%d ", ptr->num);
            ptr = ptr->next;
      }
}

void distinct(Node *ptr)
{
	while(ptr->next != NULL)
	{
		if(ptr->num == ptr->next->num)
		{
			Node *temp = ptr->next;
			ptr->next = (ptr->next)->next;
			free(temp);

		}
		else
		{
			if(ptr->next != NULL)
				ptr = ptr->next;
		}
	}
}

void main()
{
	int i, n;
	Node *current, *head = (struct Node*)malloc(sizeof(struct Node));
    head->num = 0;
    head->next = NULL;
    current = head;
    printf("Enter Number of Elements : ");
    scanf("%d", &n);
    for(i = 0; i < n; i++)
    {
        current = push(current);
    }
    printf("\nBefore Operation : ");
    display(head->next);
    distinct(head->next);
    printf("\nAfter Operation : ");
    display(head->next);
}

OUTPUT :
Enter Number of Elements : 7
Enter Value : 1
Enter Value : 2
Enter Value : 2
Enter Value : 3
Enter Value : 3
Enter Value : 3
Enter Value : 4

Before Operation :
List : 1 2 2 3 3 3 4
After Operation :
List : 1 2 3 4

Q4//Doubly Linked List Operations

#include<stdio.h>
#include<stdlib.h>

typedef struct Node Node;
struct Node
{
    int num;
    Node *next, *prev;
};

Node* traverse(int pos, Node *ptr)
{
    int k = 0;
    while((k < pos-1) && (ptr != NULL))
    {
          ptr = ptr->next;
          k++;
    }
    return ptr;
}

void insertHead(Node **head)
{
	Node *newhead = (Node*)malloc(sizeof(Node));
	printf("Enter Element : ");
	scanf("%d", &newhead->num);
  newhead->next = *head;
  (*head)->prev = newhead;
  *head = newhead;
}

void insert(struct Node *ptr)
{
    Node *new = (Node*)malloc(sizeof(Node));
    printf("Enter Value : ");
    scanf("%d", &new->num);
    new->next = ptr->next;
    ptr->next = new;
    if(ptr->next)
        ptr->next->prev = new;
    new->prev = ptr;
}

Node* push(Node *ptr)
{
    Node *new = malloc(sizeof(Node));
    printf("Enter Value : ");
    scanf("%d", &new->num);
    new->next = ptr->next;
    ptr->next = new;
    new->prev = ptr;
}

void deleteHead(Node **head)
{
  Node *temp = (*head);
	(*head) = (*head)->next;
	free(temp);
}

void delete(Node *ptr)
{
      ptr->prev->next = ptr->next;
      free(ptr);
}

void last(Node **lastNode)
{
    if((*lastNode)->next != NULL)
    {
        lastNode = &((*lastNode)->next);
    }
}
void search(Node *ptr)
{
	printf("Value is %d", ptr->num);
}
void display(Node *ptr)
{
      printf("\nList : ");
      while(ptr != NULL)
      {
            printf("%d ", ptr->num);
            ptr = ptr->next;
      }
}

int position()
{
    int pos;
    printf("\nEnter Position : ");
    scanf("%d", &pos);
    return pos;
}

void main()
{
    Node *current, *head = malloc(sizeof(Node));
    head->num = 0;
    head->next = NULL;
    head->prev = NULL;
    int ch = 0, ch1 = 0, loop = 1, i = 0, n;
    while(loop != 0)
    {
      printf("\n1 : Insert \n2 : Delete \n3 : Search \n4 : Display \n-> ");
      scanf("%d", &ch);
      if(ch == 1)
      {
          printf("\n1 : Insert Head \n2 : Insert at a Position \n3 : Push Many Elements \n-> ");
      	  scanf("%d", &ch1);
      	  if(ch1 == 1)
      	        insertHead(&head);
          else if(ch1 == 2)
                insert(traverse(position(), head));
          else if(ch1 == 3)
          {
      	  	printf("Enter Number of Elements : ");
      	  	scanf("%d", &n);
            current = head;
            last(&current);
      	  	for(i = 0; i < n; i++)
      	  	{
          		  current = push(current);
          	}
       }
      }

      else if(ch == 2)
      {
      	  printf("To delete Head, Press 1 -> ");
      	  scanf("%d", &ch1);
      	  if(ch1 == 1)
				        deleteHead(&head);
          else
		   		      delete(traverse(position()+1, head));
      }
	    else if(ch == 3)
	  	     search(traverse(position(), head));
      else if(ch == 4)
          display(head->next);
      else
          printf("\nInvalid Choice");
      printf("\nTo End : Press 0 -> ");
      scanf("%d", &loop);
    }

}
OUTPUT :

1 : Insert
2 : Delete
3 : Search
4 : Display
-> 1

1 : Insert Head
2 : Insert at a Position
3 : Push Many Elements
-> 1
Enter Element : 1

To End : Press 0 -> 1

1 : Insert
2 : Delete
3 : Search
4 : Display
-> 1

1 : Insert Head
2 : Insert at a Position
3 : Push Many Elements
-> 2

Enter Position : 2
Enter Value : 1

To End : Press 0 -> 1

1 : Insert
2 : Delete
3 : Search
4 : Display
-> 1

1 : Insert Head
2 : Insert at a Position
3 : Push Many Elements
-> 3
Enter Number of Elements : 5
Enter Value : 2
Enter Value : 3
Enter Value : 4
Enter Value : 5
Enter Value : 6

To End : Press 0 -> 1

1 : Insert
2 : Delete
3 : Search
4 : Display
-> 4

List : 0 1 2 3 4 5 6
To End : Press 0 -> 1

1 : Insert
2 : Delete
3 : Search
4 : Display
-> 2
To delete Head, Press 1 -> 1

To End : Press 0 -> 1

1 : Insert
2 : Delete
3 : Search
4 : Display
-> 4

List : 1 2 3 4 5 6
To End : Press 0 -> 2

1 : Insert
2 : Delete
3 : Search
4 : Display
-> 2
To delete Head, Press 1 -> 2

Enter Position : 3

To End : Press 0 -> 1

1 : Insert
2 : Delete
3 : Search
4 : Display
-> 4

List : 1 2 4 5 6
To End : Press 0 -> 1

1 : Insert
2 : Delete
3 : Search
4 : Display
-> 3

Enter Position : 3
Value is 4
To End : Press 0 -> 0
